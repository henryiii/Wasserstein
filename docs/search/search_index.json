{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Wasserstein Features The Wasserstein package computes Wasserstein distances and related quantities efficiently. It contains an efficient implementation of the network simplex algorithm originally from the LEMON graph library , modified by Nicolas Boneel , modified by the authors of the Python Optimal Transport (POT) library, and further modified in this package by Patrick Komiske. The main code is written in C++ with a Python wrapper provided via SWIG . The following classes contain the main functionalities of Wasserstein: EMD : Computes the Wasserstein distance between two distributions, including a possible penalty term. Can use either the builtin Euclidean ground distance (with the possibility of raising these to a power beta ) or a custom ground distance between distributions. PairwiseEMD : Computes pairs of Wasserstein distances between collections of distributions. Multi-threading support is provided via OMP. CorrelationDimension : The correlation dimension is a type of fractal dimension that estimates dimensionality of the underlying data manifold on which the distributions live. It has been applied to CMS Open Data . The current version is 0.3.0 . Changes are summarized in the Release Notes . Using the most up-to-date version is recommended. As of version 0.2.0 , tests have been written covering the majority of the code. The source code can be found on GitHub . References [1] N. Bonneel, M. van de Panne, S. Paris, W. Heidrich, Displacement interpolation using Lagrangian mass transport , ACM Trans. Graph. 30 (2011). [2] P. T. Komiske, E. M. Metodiev, and J. Thaler, The Metric Space of Collider Events , Phys. Rev. Lett. 123 (2019) 041801 [ 1902.02346 ]. [3] P. T. Komiske, E. M. Metodiev, and J. Thaler, The Hidden Geometry of Particle Collisions , JHEP 07 (2020) 006 [ 2004.04159 ]. Copyright Wasserstein is licensed under the GNU Puplic License v3 . See the LICENSE for detailed copyright information.","title":"Home"},{"location":"#welcome-to-wasserstein","text":"","title":"Welcome to Wasserstein"},{"location":"#features","text":"The Wasserstein package computes Wasserstein distances and related quantities efficiently. It contains an efficient implementation of the network simplex algorithm originally from the LEMON graph library , modified by Nicolas Boneel , modified by the authors of the Python Optimal Transport (POT) library, and further modified in this package by Patrick Komiske. The main code is written in C++ with a Python wrapper provided via SWIG . The following classes contain the main functionalities of Wasserstein: EMD : Computes the Wasserstein distance between two distributions, including a possible penalty term. Can use either the builtin Euclidean ground distance (with the possibility of raising these to a power beta ) or a custom ground distance between distributions. PairwiseEMD : Computes pairs of Wasserstein distances between collections of distributions. Multi-threading support is provided via OMP. CorrelationDimension : The correlation dimension is a type of fractal dimension that estimates dimensionality of the underlying data manifold on which the distributions live. It has been applied to CMS Open Data . The current version is 0.3.0 . Changes are summarized in the Release Notes . Using the most up-to-date version is recommended. As of version 0.2.0 , tests have been written covering the majority of the code. The source code can be found on GitHub .","title":"Features"},{"location":"#references","text":"[1] N. Bonneel, M. van de Panne, S. Paris, W. Heidrich, Displacement interpolation using Lagrangian mass transport , ACM Trans. Graph. 30 (2011). [2] P. T. Komiske, E. M. Metodiev, and J. Thaler, The Metric Space of Collider Events , Phys. Rev. Lett. 123 (2019) 041801 [ 1902.02346 ]. [3] P. T. Komiske, E. M. Metodiev, and J. Thaler, The Hidden Geometry of Particle Collisions , JHEP 07 (2020) 006 [ 2004.04159 ].","title":"References"},{"location":"#copyright","text":"Wasserstein is licensed under the GNU Puplic License v3 . See the LICENSE for detailed copyright information.","title":"Copyright"},{"location":"demos/","text":"Interactive Demos The following Jupyter notebook demo is available on GitHub. Binder provides an awesome platform for running it durectly in your browser without installing anything whatsoever. For C++ usage, check out the Examples . Wasserstein Demo The Wasserstein Demo provides an introduction to using the Wasserstein package to compute Wasserstein/distances. View or download the notebook from GitHub","title":"Python Demos"},{"location":"demos/#interactive-demos","text":"The following Jupyter notebook demo is available on GitHub. Binder provides an awesome platform for running it durectly in your browser without installing anything whatsoever. For C++ usage, check out the Examples .","title":"Interactive Demos"},{"location":"demos/#wasserstein-demo","text":"The Wasserstein Demo provides an introduction to using the Wasserstein package to compute Wasserstein/distances. View or download the notebook from GitHub","title":"Wasserstein Demo"},{"location":"examples/","text":"Coming soon!","title":"C++ Examples"},{"location":"faqs/","text":"Frequently Asked EnergyFlow Questions Why should I use Wasserstein instead of the Python Optimal Transport (POT) library? How do I cite the Wasserstein package? Where can I get the code? How do I report an issue or a bug? Why should I use Wasserstein instead of the Python Optimal Transport (POT) library? POT offers EMD functionality based on the same algorithm as Wasserstein. You'll find that Wasserstein is faster (up to 2x) for small problems (around 100 particles) due to the more efficient way in which we interface with NumPy. Also, Wasserstein offers greater numerical flexibility, with the ability to control certain floating point epsilons that POT hard codes and can cause failure (especially on macOS, we have found). And then there is the C++ interface that Wasserstein exposes in case you work in that language. How do I cite the Wasserstein package? Please cite the relevant papers if they or this package help your research. Here are the BibTeX entries to use: @article{10.1145/2070781.2024192, author = \"Bonneel, Nicolas and van de Panne, Michiel and Paris, Sylvain and Heidrich, Wolfgang\", title = \"{Displacement Interpolation Using Lagrangian Mass Transport}\", year = \"2011\", issue_date = \"December 2011\", publisher = \"Association for Computing Machinery\", address = \"New York, NY, USA\", volume = \"30\", number = \"6\", issn = \"0730-0301\", url = \"https://doi.org/10.1145/2070781.2024192\", doi = \"10.1145/2070781.2024192\", journal = \"ACM Trans. Graph.\", month = \"dec\", pages = \"1\u201312\", numpages = \"12\" } @article{Komiske:2019fks, author = \"Komiske, Patrick T. and Metodiev, Eric M. and Thaler, Jesse\", title = \"{Metric Space of Collider Events}\", eprint = \"1902.02346\", archivePrefix = \"arXiv\", primaryClass = \"hep-ph\", reportNumber = \"MIT-CTP 5102\", doi = \"10.1103/PhysRevLett.123.041801\", journal = \"Phys. Rev. Lett.\", volume = \"123\", number = \"4\", pages = \"041801\", year = \"2019\" } @article{Komiske:2020qhg, author = \"Komiske, Patrick T. and Metodiev, Eric M. and Thaler, Jesse\", title = \"{The Hidden Geometry of Particle Collisions}\", eprint = \"2004.04159\", archivePrefix = \"arXiv\", primaryClass = \"hep-ph\", reportNumber = \"MIT-CTP 5185\", doi = \"10.1007/JHEP07(2020)006\", journal = \"JHEP\", volume = \"07\", pages = \"006\", year = \"2020\" } Where can I get the code? The code is open source and hosted on GitHub . How do I report an issue? Please report any issues you encounter by creating a GitHub Issue .","title":"FAQs"},{"location":"faqs/#frequently-asked-energyflow-questions","text":"Why should I use Wasserstein instead of the Python Optimal Transport (POT) library? How do I cite the Wasserstein package? Where can I get the code? How do I report an issue or a bug?","title":"Frequently Asked EnergyFlow Questions"},{"location":"faqs/#why-should-i-use-wasserstein-instead-of-the-python-optimal-transport-pot-library","text":"POT offers EMD functionality based on the same algorithm as Wasserstein. You'll find that Wasserstein is faster (up to 2x) for small problems (around 100 particles) due to the more efficient way in which we interface with NumPy. Also, Wasserstein offers greater numerical flexibility, with the ability to control certain floating point epsilons that POT hard codes and can cause failure (especially on macOS, we have found). And then there is the C++ interface that Wasserstein exposes in case you work in that language.","title":"Why should I use Wasserstein instead of the Python Optimal Transport (POT) library?"},{"location":"faqs/#how-do-i-cite-the-wasserstein-package","text":"Please cite the relevant papers if they or this package help your research. Here are the BibTeX entries to use: @article{10.1145/2070781.2024192, author = \"Bonneel, Nicolas and van de Panne, Michiel and Paris, Sylvain and Heidrich, Wolfgang\", title = \"{Displacement Interpolation Using Lagrangian Mass Transport}\", year = \"2011\", issue_date = \"December 2011\", publisher = \"Association for Computing Machinery\", address = \"New York, NY, USA\", volume = \"30\", number = \"6\", issn = \"0730-0301\", url = \"https://doi.org/10.1145/2070781.2024192\", doi = \"10.1145/2070781.2024192\", journal = \"ACM Trans. Graph.\", month = \"dec\", pages = \"1\u201312\", numpages = \"12\" } @article{Komiske:2019fks, author = \"Komiske, Patrick T. and Metodiev, Eric M. and Thaler, Jesse\", title = \"{Metric Space of Collider Events}\", eprint = \"1902.02346\", archivePrefix = \"arXiv\", primaryClass = \"hep-ph\", reportNumber = \"MIT-CTP 5102\", doi = \"10.1103/PhysRevLett.123.041801\", journal = \"Phys. Rev. Lett.\", volume = \"123\", number = \"4\", pages = \"041801\", year = \"2019\" } @article{Komiske:2020qhg, author = \"Komiske, Patrick T. and Metodiev, Eric M. and Thaler, Jesse\", title = \"{The Hidden Geometry of Particle Collisions}\", eprint = \"2004.04159\", archivePrefix = \"arXiv\", primaryClass = \"hep-ph\", reportNumber = \"MIT-CTP 5185\", doi = \"10.1007/JHEP07(2020)006\", journal = \"JHEP\", volume = \"07\", pages = \"006\", year = \"2020\" }","title":"How do I cite the Wasserstein package?"},{"location":"faqs/#where-can-i-get-the-code","text":"The code is open source and hosted on GitHub .","title":"Where can I get the code?"},{"location":"faqs/#how-do-i-report-an-issue","text":"Please report any issues you encounter by creating a GitHub Issue .","title":"How do I report an issue?"},{"location":"installation/","text":"Installation The Wasserstein package can be used as a header-only C++ template library or as a Python package that wraps the C++ code. Python Install via pip Precompiled Python wheels are available for Linux, maxOS, and Windows via PyPI. The only strict dependency is NumPy, though Wurlitzer is also installed in order to redirect standard output into Jupyter notebooks in the demos. Simply run the following in a terminal to install Wasserstein: pip3 install wasserstein Install from Python source The only reason to bother with the source code when using Wasserstein in Python is if one wants to develop some feature in the package. The Wasserstein source code can be obtained from GitHub . Running python3 setup.py swig (which requires the swig binary to be available on the path) will regenerate the Python wrapper code. Running python3 setup.py build_ext --inplace will compile the library, and pip3 install -e . will install a development version pointing to the current directory. C++ The Wasserstein source code can be obtained from GitHub . Since the library is header-only, no compilation is required to install it. The provided install_wasserstein.sh script can be used (on a UNIX-like system, at least) to move the requisite header files to an appropriate location such as /usr/local/include . If your system does not have the Boost libraries (version 1.70.0 or newer is required to access the histogram package) available, set the second argument to true in order to use the provided Boost Histogram header files. Try the following in order to move the Wasserstein header files to an installed location, in this case /usr/local/include : git clone https://github.com/pkomiske/Wasserstein cd Wasserstein chmod +x install_wasserstein.sh ./install_wasserstein /usr/local false","title":"Installation"},{"location":"installation/#installation","text":"The Wasserstein package can be used as a header-only C++ template library or as a Python package that wraps the C++ code.","title":"Installation"},{"location":"installation/#python","text":"","title":"Python"},{"location":"installation/#install-via-pip","text":"Precompiled Python wheels are available for Linux, maxOS, and Windows via PyPI. The only strict dependency is NumPy, though Wurlitzer is also installed in order to redirect standard output into Jupyter notebooks in the demos. Simply run the following in a terminal to install Wasserstein: pip3 install wasserstein","title":"Install via pip"},{"location":"installation/#install-from-python-source","text":"The only reason to bother with the source code when using Wasserstein in Python is if one wants to develop some feature in the package. The Wasserstein source code can be obtained from GitHub . Running python3 setup.py swig (which requires the swig binary to be available on the path) will regenerate the Python wrapper code. Running python3 setup.py build_ext --inplace will compile the library, and pip3 install -e . will install a development version pointing to the current directory.","title":"Install from Python source"},{"location":"installation/#c","text":"The Wasserstein source code can be obtained from GitHub . Since the library is header-only, no compilation is required to install it. The provided install_wasserstein.sh script can be used (on a UNIX-like system, at least) to move the requisite header files to an appropriate location such as /usr/local/include . If your system does not have the Boost libraries (version 1.70.0 or newer is required to access the histogram package) available, set the second argument to true in order to use the provided Boost Histogram header files. Try the following in order to move the Wasserstein header files to an installed location, in this case /usr/local/include : git clone https://github.com/pkomiske/Wasserstein cd Wasserstein chmod +x install_wasserstein.sh ./install_wasserstein /usr/local false","title":"C++"},{"location":"releases/","text":"Release Notes 0.3.x 0.3.0 Chanages to some argument names. First version that EnergyFlow depends on publicly. First version with online documentation. 0.2.x 0.2.0 First public version that should have reliable functionality. Tests written that cover most of the code. 0.1.x Rapid testing and development including getting the Python build system on Travis-CI .","title":"Release Notes"},{"location":"releases/#release-notes","text":"","title":"Release Notes"},{"location":"releases/#03x","text":"0.3.0 Chanages to some argument names. First version that EnergyFlow depends on publicly. First version with online documentation.","title":"0.3.x"},{"location":"releases/#02x","text":"0.2.0 First public version that should have reliable functionality. Tests written that cover most of the code.","title":"0.2.x"},{"location":"releases/#01x","text":"Rapid testing and development including getting the Python build system on Travis-CI .","title":"0.1.x"},{"location":"docs/correlationdimension/","text":"Coming soon!","title":"CorrelationDimension"},{"location":"docs/emd/","text":"Coming soon!","title":"EMD"},{"location":"docs/emds/","text":"Coming soon!","title":"PairwiseEMD"}]}